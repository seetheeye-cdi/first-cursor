---
globs: app/**/*,pages/**/*,*.config.*
---

# Next.js 15 App Router 전용 가이드

## 성능 최적화 - 핵심 원칙
- **'use client' 최소화**: React Server Components (RSC) 우선 사용
- **'useEffect', 'setState' 최소화**: 서버 컴포넌트와 Next.js SSR 활용
- **Web API 접근이 필요한 작은 컴포넌트에만 'use client' 사용**
- **데이터 페칭이나 상태 관리에는 'use client' 지양**

## 컴포넌트 아키텍처

### Server Components (기본값)
```typescript
// app/components/UserProfile.tsx
interface UserProfileProps {
  userId: string;
}

// 서버 컴포넌트 - 'use client' 없음
export async function UserProfile({ userId }: UserProfileProps) {
  const user = await fetchUser(userId); // 서버에서 데이터 페칭
  
  return (
    <div>
      <h1>{user.name}</h1>
      <UserActions userId={userId} /> {/* 클라이언트 컴포넌트 */}
    </div>
  );
}
```

### Client Components (필요시에만)
```typescript
// app/components/UserActions.tsx
'use client';

interface UserActionsProps {
  userId: string;
}

export function UserActions({ userId }: UserActionsProps) {
  function handleClick() {
    // 브라우저 API 필요시에만 클라이언트 컴포넌트 사용
    navigator.clipboard.writeText(userId);
  }

  return <button onClick={handleClick}>Copy ID</button>;
}
```

## Suspense와 에러 처리
- **클라이언트 컴포넌트를 Suspense로 감싸기**
- **fallback 제공 필수**

```typescript
// app/page.tsx
import { Suspense } from 'react';
import { UserActions } from './components/UserActions';

export default function Page() {
  return (
    <Suspense fallback={<div>Loading actions...</div>}>
      <UserActions userId="123" />
    </Suspense>
  );
}
```

## 동적 로딩
```typescript
import dynamic from 'next/dynamic';

const DynamicComponent = dynamic(
  () => import('./components/HeavyComponent'),
  { 
    loading: () => <p>Loading...</p>,
    ssr: false // 필요시 SSR 비활성화
  }
);
```

## 라우팅과 페이지 구조

### App Router 디렉토리 구조
```
app/
├── layout.tsx          # 루트 레이아웃
├── page.tsx           # 홈페이지
├── globals.css        # 글로벌 스타일
├── (auth)/            # 라우트 그룹
│   ├── login/
│   │   └── page.tsx
│   └── register/
│       └── page.tsx
├── dashboard/
│   ├── layout.tsx     # 중첩 레이아웃
│   ├── page.tsx
│   └── settings/
│       └── page.tsx
└── api/               # API 라우트
    └── users/
        └── route.ts
```

### 메타데이터 설정
```typescript
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: '페이지 제목',
  description: '페이지 설명',
  openGraph: {
    title: '페이지 제목',
    description: '페이지 설명'
  }
};
```

## 데이터 페칭
- **서버 컴포넌트에서 직접 async/await 사용**
- **클라이언트 사이드 데이터 페칭 최소화**

```typescript
// 서버 컴포넌트에서 데이터 페칭
export default async function PostsPage() {
  const posts = await fetch('https://api.example.com/posts')
    .then(res => res.json());

  return (
    <div>
      {posts.map(post => (
        <article key={post.id}>{post.title}</article>
      ))}
    </div>
  );
}
```

## 이미지 최적화
```typescript
import Image from 'next/image';

// WebP 형식 사용, 크기 데이터 포함, 지연 로딩 구현
<Image
  src="/hero-image.webp"
  alt="Hero image"
  width={800}
  height={600}
  priority // 중요한 이미지만 priority 설정
  placeholder="blur" // 필요시 blur placeholder
/>
```

## URL 상태 관리
- **'nuqs' 라이브러리 사용** for URL search parameter state management

```typescript
import { useQueryState } from 'nuqs';

export function SearchComponent() {
  const [search, setSearch] = useQueryState('q');
  
  return (
    <input
      value={search || ''}
      onChange={(e) => setSearch(e.target.value)}
      placeholder="Search..."
    />
  );
}
```

## Web Vitals 최적화
- **LCP (Largest Contentful Paint) 최적화**
- **CLS (Cumulative Layout Shift) 최소화**
- **FID (First Input Delay) 개선**