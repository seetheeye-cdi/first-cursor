---
globs: *.tsx,*.css,components/**/*
---

# UI 및 스타일링 가이드

## Shadcn UI, Radix UI, Tailwind CSS 사용

### 컴포넌트 우선순위
1. **Shadcn UI** - 첫 번째 선택
2. **Radix UI** - 더 세밀한 제어가 필요한 경우
3. **Tailwind CSS** - 커스텀 스타일링

### Shadcn UI 컴포넌트 사용법
```typescript
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export function UserCard({ user }: { user: User }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>{user.name}</CardTitle>
      </CardHeader>
      <CardContent>
        <Button variant="outline" size="sm">
          Edit Profile
        </Button>
      </CardContent>
    </Card>
  );
}
```

### Radix UI 저수준 컴포넌트
```typescript
import * as Dialog from '@radix-ui/react-dialog';

export function CustomModal({ children }: { children: React.ReactNode }) {
  return (
    <Dialog.Root>
      <Dialog.Trigger asChild>
        <Button>Open Dialog</Button>
      </Dialog.Trigger>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50" />
        <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          {children}
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
}
```

## Tailwind CSS 반응형 디자인

### 모바일 퍼스트 접근법
```typescript
export function ResponsiveLayout() {
  return (
    <div className="
      grid 
      grid-cols-1          /* 모바일: 1열 */
      md:grid-cols-2       /* 태블릿: 2열 */
      lg:grid-cols-3       /* 데스크톱: 3열 */
      gap-4 
      p-4 
      md:p-6 
      lg:p-8
    ">
      <Card>Card 1</Card>
      <Card>Card 2</Card>
      <Card>Card 3</Card>
    </div>
  );
}
```

### 반응형 중단점
- `sm`: 640px 이상
- `md`: 768px 이상  
- `lg`: 1024px 이상
- `xl`: 1280px 이상
- `2xl`: 1536px 이상

### 스타일링 패턴

#### 컨테이너 클래스
```typescript
// 중앙 정렬 컨테이너
<div className="container mx-auto px-4 sm:px-6 lg:px-8">
  {/* 콘텐츠 */}
</div>

// 최대 너비 제한
<div className="max-w-4xl mx-auto">
  {/* 콘텐츠 */}
</div>
```

#### 플렉스 레이아웃
```typescript
// 수평 정렬
<div className="flex items-center justify-between">
  <span>Left</span>
  <span>Right</span>
</div>

// 수직 정렬
<div className="flex flex-col space-y-4">
  <div>Item 1</div>
  <div>Item 2</div>
</div>
```

#### 그리드 레이아웃
```typescript
// 자동 크기 그리드
<div className="grid grid-cols-auto-fit gap-4" style={{'--min-col-width': '250px'}}>
  {items.map(item => <Card key={item.id}>{item.name}</Card>)}
</div>

// 고정 크기 그리드
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  {/* 그리드 항목들 */}
</div>
```

## 접근성 및 사용성

### 포커스 관리
```typescript
// 키보드 네비게이션 지원
<button className="
  focus:outline-none 
  focus:ring-2 
  focus:ring-blue-500 
  focus:ring-offset-2
">
  Accessible Button
</button>
```

### 시맨틱 HTML
```typescript
export function ArticleLayout() {
  return (
    <article className="prose prose-lg mx-auto">
      <header>
        <h1>Article Title</h1>
        <time dateTime="2023-12-01">December 1, 2023</time>
      </header>
      <main>
        <p>Article content...</p>
      </main>
    </article>
  );
}
```

### 다크 모드 지원
```typescript
// Tailwind 다크 모드 클래스 사용
<div className="
  bg-white 
  dark:bg-gray-900 
  text-gray-900 
  dark:text-gray-100
">
  Light/Dark Mode Content
</div>
```

## 성능 최적화

### CSS-in-JS 지양
- Tailwind 유틸리티 클래스 우선 사용
- 런타임 스타일 생성 최소화
- 컴파일 타임 최적화 활용

### 임계 CSS
```typescript
// 중요한 스타일은 인라인으로
export function CriticalComponent() {
  return (
    <div 
      className="min-h-screen flex items-center justify-center"
      style={{ backgroundImage: 'linear-gradient(to right, #667eea 0%, #764ba2 100%)' }}
    >
      {/* Above-the-fold 콘텐츠 */}
    </div>
  );
}
```